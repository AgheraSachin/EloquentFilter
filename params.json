{
  "name": "Eloquentfilter",
  "tagline": "Eloquently Filter Your Laravel Models",
  "body": "# Eloquent Filter\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/tucker-eric/eloquentfilter/v/stable)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![Total Downloads](https://poser.pugx.org/tucker-eric/eloquentfilter/downloads)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![Daily Downloads](https://poser.pugx.org/tucker-eric/eloquentfilter/d/daily)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![License](https://poser.pugx.org/tucker-eric/eloquentfilter/license)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![StyleCI](https://styleci.io/repos/53163405/shield)](https://styleci.io/repos/53163405/)\r\n[![Build Status](https://travis-ci.org/Tucker-Eric/EloquentFilter.svg?branch=master)](https://travis-ci.org/Tucker-Eric/EloquentFilter)\r\n\r\nAn Eloquent way to filter Eloquent Models\r\n\r\n## Introduction\r\nLets say we want to return a list of users filtered by multiple parameters. When we navigate to:\r\n\r\n`/users?name=er&last_name=&company_id=2&roles[]=1&roles[]=4&roles[]=7&industry=5`\r\n\r\n`$request->all()` will return:\r\n\r\n```php\r\n[\r\n\t'name' \t\t => 'er',\r\n    'last_name'  => '',\r\n    'company_id' => '2',\r\n    'roles'      => ['1','4','7'],\r\n    'industry'   => '5'\r\n]\r\n```\r\n\r\nTo filter by all those parameters we would need to do something like:\r\n\r\n```php\r\n<?php namespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\n\r\nclass UserController extends Controller\r\n{\r\n\r\n    public function index(Request $request)\r\n    {\r\n    \t$query = User::where('company_id', $request->input('company_id'));\r\n\r\n        if ($request->has('last_name'))\r\n        {\r\n            $query->where('last_name', 'LIKE', '%' . $request->input('last_name') . '%');\r\n        }\r\n\r\n        if ($request->has('name'))\r\n        {\r\n            $query->where(function ($q) use ($request)\r\n            {\r\n                return $q->where('first_name', 'LIKE', $request->input('name') . '%')\r\n                    ->orWhere('last_name', 'LIKE', '%' . $request->input('name') . '%');\r\n            });\r\n        }\r\n\r\n        $query->whereHas('roles', function ($q) use ($request)\r\n        {\r\n            return $q->whereIn('id', $request->input('roles'));\r\n        })\r\n            ->whereHas('clients', function ($q) use ($request)\r\n            {\r\n                return $q->whereHas('industry_id', $request->input('industry'));\r\n            });\r\n\r\n        return $query->get();\r\n    }\r\n\r\n}\r\n```\r\n\r\nTo filter that same input With Eloquent Filters:\r\n\r\n```php\r\n<?php namespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\n\r\nclass UserController extends Controller\r\n{\r\n\r\n\tpublic function index(Request $request)\r\n    {\r\n    \treturn User::filter($request->all())->get();\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Configuration\r\n### Install Through Composer\r\n```\r\ncomposer require tucker-eric/eloquentfilter\r\n```\r\n#### Define the default model filter\r\n\r\nCreate a public method `modelFilter()` that returns `$this->provideFilter(Your\\Model\\Filter::class);` in your model.\r\n\r\n> Not definining a filter in your model will default the filter to `App\\ModelFilters\\{Model}Filter`. For example, in our user model the `filter()` method will use the `App\\ModelFilters\\UserFilter` if not otherwise defined.  `App\\ModelFilters` namespace is used if there is no configuration file.\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse EloqentFilter\\Filterable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function modelFilter()\r\n    {\r\n    \treturn $this->provideFilter(App\\ModelFilters\\CustomFilters\\CustomUserFilter::class);\r\n    }\r\n\r\n    //User Class\r\n}\r\n```\r\n\r\n#### With Configuration File (Optional)\r\n> Registering the service provider will give you access to the `php artisan model:filter {model}` command as well as allow you to publish the configuration file.  Registering the service provider is not required as long as you have a `modelFilter()` method on all models using the `EloquentFilter\\Filterable` trait OR all your model filters reside in the `App\\ModelFilters` namespace and follow the naming convention of `{Model}Filter`\r\n\r\nAfter installing the Eloquent Filter library, register the `EloquentFilter\\ServiceProvider::class` in your `config/app.php` configuration file:\r\n\r\n```php\r\n'providers' => [\r\n    // Other service providers...\r\n\r\n    EloquentFilter\\ServiceProvider::class,\r\n],\r\n```\r\n\r\nCopy the package config to your local config with the publish command:\r\n\r\n```bash\r\nphp artisan vendor:publish --provider=\"EloquentFilter\\ServiceProvider\"\r\n```\r\n\r\nIn the `app/eloquentfilter.php` config file.  Set the namespace your model filters will reside in:\r\n\r\n```php\r\n'namespace' => \"App\\\\ModelFilters\\\\\",\r\n```\r\n\r\n#### Generating The Filter\r\n> Only available if you have registered `EloquentFilter\\ServiceProvider::class` in the providers array in your `config/app.php'\r\n\r\nYou can create a model filter with the following artisan command:\r\n\r\n```bash\r\nphp artisan model:filter User\r\n```\r\n\r\nWhere `User` is the Eloquent Model you are creating the filter for.  This will create `app/ModelFilters/UserFilter.php`\r\n\r\nThe command also supports psr-4 namespacing for creating filters.  You just need to make sure you escape the backslashes in the class name.  For example:\r\n\r\n```bash\r\nphp artisan model:filter AdminFilters\\\\User\r\n```\r\n\r\nThis would create `app/ModelFilters/AdminFilters/UserFilter.php`\r\n\r\n## Usage\r\n\r\n### Defining The Filter Logic\r\nDefine the filter logic based on the camel cased input key passed to the `filter()` method.\r\n\r\n- Empty strings are ignored\r\n- `setup()` will be called regardless of input\r\n- `_id` is dropped from the end of the input to define the method so filtering `user_id` would use the `user()` method\r\n- Input without a corresponding filter method are ignored\r\n- The value of the key is injected into the method\r\n- All values are accessible through the `$this->input()` method or a single value by key `$this->input($key)`\r\n- All Eloquent Builder methods are accessible in `this` context in the model filter class.\r\n\r\nTo define methods for the following input:\r\n\r\n```php\r\n[\r\n\t'company_id'   => 5,\r\n\t'name'         => 'Tuck',\r\n\t'mobile_phone' => '888555'\r\n]\r\n```\r\n\r\nYou would use the following methods:\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\t// This will filter 'company_id' OR 'company'\r\n    public function company($id)\r\n    {\r\n        return $this->where('company_id', $id);\r\n    }\r\n\r\n    public function name($name)\r\n    {\r\n        return $this->where(function($q) use ($name)\r\n        {\r\n            return $q->where('first_name', 'LIKE', \"%$name%\")\r\n                ->orWhere('last_name', 'LIKE', \"%$name%\");\r\n        });\r\n    }\r\n\r\n    public function mobilePhone($phone)\r\n    {\r\n        return $this->where('mobile_phone', 'LIKE', \"$phone%\");\r\n    }\r\n\r\n\tpublic function setup()\r\n    {\r\n        $this->onlyShowDeletedForAdmins();\r\n    }\r\n\r\n    public function onlyShowDeletedForAdmins()\r\n    {\r\n        if(Auth::user()->isAdmin())\r\n        {\r\n            $this->withTrashed();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n> Note:  In the above example if you do not want `_id` dropped from the end of the input you can set `protected $drop_id = false` on your filter class.  Doing this would allow you to have a `company()` filter method as well as a `companyId()` filter method.\r\n\r\n> Note: In the example above all methods inside `setup()` will be called every time `filter()` is called on the model\r\n\r\n### Applying The Filter To A Model\r\n\r\nImplement the `EloquentFilter\\Filterable` trait on any Eloquent model:\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse EloqentFilter\\Filterable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    //User Class\r\n}\r\n```\r\n\r\nThis gives you access to the `filter()` method that accepts an array of input:\r\n\r\n```php\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n        return User::filter($request->all())->get();\r\n    }\r\n}\r\n```\r\n\r\n#### Filtering By Relationships\r\nIn order to filter by a relationship (whether the relation is joined in the query or not) add the relation in the `$relations` array with the name of the relation as referred to on the model as the key and the column names that will be received as input to filter.\r\n\r\nThe related model **MUST** have a ModelFilter associated with it.  We instantiate the related model's filter and use the column values from the `$relations` array to call the associated methods.\r\n\r\nThis is helpful when querying multiple columns on a relation's table.  For a single column using a `$this->whereHas()` method in the model filter works just fine\r\n\r\n##### Example:\r\n\r\nIf I have a `User` that `hasMany` `App\\Client::class` my model would look like:\r\n\r\n```php\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function clients()\r\n    {\r\n    \treturn $this->hasMany(Client::class);\r\n    }\r\n}\r\n```\r\n\r\nLet's also say each `App\\Client` has belongs to `App\\Industry::class`:\r\n\r\n```php\r\nclass Client extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function industry()\r\n    {\r\n    \treturn $this->belongsTo(Industry::class);\r\n    }\r\n}\r\n```\r\n\r\nWe want to query our User's and filter them based on the industry of their client:\r\n\r\nInput used to filter:\r\n\r\n```php\r\n$input = [\r\n\t'industry' => '5'\r\n];\r\n```\r\n\r\n`UserFilter` with the relation defined so it's able to be queried.\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [\r\n        'clients' => ['industry'],\r\n    ];\r\n}\r\n```\r\n\r\n`ClientFilter` with the `industry` method that's used to filter:\r\n> **Note:** The `$relations` array should identify the relation and the input key to filter by that relation. Just as the `ModelFilter` works, this will access the camelCased method on that relation's filter. If the above example was using the key `industry_type` for the input the relations array would be `$relations = ['clients' => ['industry_type']]` and the `ClientFilter` would have the method `industryType()`.\r\n\r\n```php\r\nclass ClientFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [];\r\n\r\n    public function industry($id)\r\n    {\r\n    \treturn $this->where('industry_id', $id);\r\n\t}\r\n}\r\n```\r\n\r\nIf the following array is passed to the `filter()` method:\r\n\r\n```php\r\n[\r\n\t'name' \t\t => 'er',\r\n    'last_name'  => ''\r\n    'company_id' => 2,\r\n    'roles'      => [1,4,7],\r\n    'industry'   => 5\r\n]\r\n```\r\n\r\nIn `app/ModelFilters/UserFilter.php`:\r\n\r\n```php\r\n<?php namespace App\\ModelFilters;\r\n\r\nuse EloquentFilter\\ModelFilter;\r\n\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [\r\n        'clients' => ['industry'],\r\n    ];\r\n\r\n\tpublic function name($name)\r\n    {\r\n    \treturn $this->where(function($q)\r\n        {\r\n        \treturn $q->where('first_name', 'LIKE', $name . '%')->orWhere('last_name', 'LIKE', '%' . $name.'%');\r\n        });\r\n    }\r\n\r\n    public function lastName($lastName)\r\n    {\r\n    \treturn $this->where('last_name', 'LIKE', '%' . $lastName);\r\n    }\r\n\r\n    public function company($id)\r\n    {\r\n    \treturn $this->where('company_id',$id);\r\n    }\r\n\r\n    public function roles($ids)\r\n    {\r\n    \treturn $this->whereHas('roles', function($query) use ($ids)\r\n        {\r\n        \treturn $query->whereIn('id', $ids);\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n##### Adding Relation Values To Filter\r\nSometimes, based on the value of a parameter you may need to push data to a relation filter.  The `push()` method does just this.\r\nIt accepts one argument as an array of key value pairs or to arguments as a key value pair `push($key, $value)`.\r\nRelated models are filtered AFTER all local values have been executed you can use this method in any filter method.\r\nThis avoids having to query a related table more than once.  For Example:\r\n\r\n```php\r\npublic $relations = [\r\n    'clients' => ['industry', 'status'],\r\n];\r\n\r\npublic function statusType($type)\r\n{\r\n    if($type === 'all') {\r\n        $this->push('status', 'all');\r\n    }\r\n}\r\n```\r\n\r\nThe above example will pass `'all'` to the `stats()` method on the `clients` relation of the model.\r\n> Calling the `push()` method in the `setup()` method will allow you to push values to the input for filter it's called on\r\n\r\n#### Pagination\r\nIf you want to paginate your query and keep the url query string without having to use:\r\n\r\n```php\r\n{!! $pages->appends(Input::except('page'))->render() !!}\r\n```\r\n\r\nThe `paginateFilter()` and `simplePaginateFilter()` methods accept the same input as [Laravel's paginator](https://laravel.com/docs/master/pagination#basic-usage) and returns the respective paginator.\r\n\r\n```php\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n        $users = User::filter($request->all())->paginateFilter();\r\n\r\n        return view('users.index', compact('users'));\r\n    }\r\n```\r\n\r\nOR:\r\n\r\n```php\r\n    public function simpleIndex(Request $request)\r\n    {\r\n        $users = User::filter($request->all())->paginateSimpleFilter();\r\n\r\n        return view('users.index', compact('users'));\r\n    }\r\n}\r\n```\r\n\r\nIn your view `$users->render()` will return pagination links as it normally would but with the original query string with empty input ignored.\r\n\r\n#### Dynamic Filters\r\nSometimes you need a dynamic way to change filters on a model or maybe use multiple filters on a model.  To define a dynamic filter just pass the filter as the second parameter of the `filter()` method:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\nuse App\\ModelFilters\\Admin\\UserFilter as AdminFilter;\r\nuse App\\ModelFilters\\User\\UserFilter as BasicUserFilter;\r\nuse Auth;\r\n\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n    \t$userFilter = Auth::user()->isAdmin() ? AdminFilter::class : BasicUserFilter::class;\r\n\r\n        return User::filter($request->all(), $userFilter)->get();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n# Contributing\r\nAny contributions welcome!\r\n",
  "google": "UA-75164993-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}