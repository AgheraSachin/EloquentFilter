{
  "name": "Eloquentfilter",
  "tagline": "Eloquently Filter Your Laravel Models",
  "body": "# Eloquent Filter\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/tucker-eric/eloquentfilter/v/stable)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![Total Downloads](https://poser.pugx.org/tucker-eric/eloquentfilter/downloads)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![Daily Downloads](https://poser.pugx.org/tucker-eric/eloquentfilter/d/daily)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![License](https://poser.pugx.org/tucker-eric/eloquentfilter/license)](https://packagist.org/packages/tucker-eric/eloquentfilter)\r\n[![StyleCI](https://styleci.io/repos/53163405/shield)](https://styleci.io/repos/53163405/)\r\n[![Build Status](https://travis-ci.org/Tucker-Eric/EloquentFilter.svg?branch=master)](https://travis-ci.org/Tucker-Eric/EloquentFilter)\r\n\r\nAn Eloquent way to filter Eloquent Models and their relationships\r\n\r\n## Introduction\r\nLets say we want to return a list of users filtered by multiple parameters. When we navigate to:\r\n\r\n`/users?name=er&last_name=&company_id=2&roles[]=1&roles[]=4&roles[]=7&industry=5`\r\n\r\n`$request->all()` will return:\r\n\r\n```php\r\n[\r\n\t'name' \t\t => 'er',\r\n    'last_name'  => '',\r\n    'company_id' => '2',\r\n    'roles'      => ['1','4','7'],\r\n    'industry'   => '5'\r\n]\r\n```\r\n\r\nTo filter by all those parameters we would need to do something like:\r\n\r\n```php\r\n<?php namespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\n\r\nclass UserController extends Controller\r\n{\r\n\r\n    public function index(Request $request)\r\n    {\r\n    \t$query = User::where('company_id', $request->input('company_id'));\r\n\r\n        if ($request->has('last_name'))\r\n        {\r\n            $query->where('last_name', 'LIKE', '%' . $request->input('last_name') . '%');\r\n        }\r\n\r\n        if ($request->has('name'))\r\n        {\r\n            $query->where(function ($q) use ($request)\r\n            {\r\n                return $q->where('first_name', 'LIKE', $request->input('name') . '%')\r\n                    ->orWhere('last_name', 'LIKE', '%' . $request->input('name') . '%');\r\n            });\r\n        }\r\n\r\n        $query->whereHas('roles', function ($q) use ($request)\r\n        {\r\n            return $q->whereIn('id', $request->input('roles'));\r\n        })\r\n            ->whereHas('clients', function ($q) use ($request)\r\n            {\r\n                return $q->whereHas('industry_id', $request->input('industry'));\r\n            });\r\n\r\n        return $query->get();\r\n    }\r\n\r\n}\r\n```\r\n\r\nTo filter that same input With Eloquent Filters:\r\n\r\n```php\r\n<?php namespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\n\r\nclass UserController extends Controller\r\n{\r\n\r\n\tpublic function index(Request $request)\r\n    {\r\n    \treturn User::filter($request->all())->get();\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Configuration\r\n### Install Through Composer\r\n```\r\ncomposer require tucker-eric/eloquentfilter\r\n```\r\n\r\nThere are a few ways to define the filter a model will use:\r\n\r\n- [Use EloquentFilter's Default Settings](#default-settings)\r\n- [Use A Custom Namespace For All Filters](#with-configuration-file-optional)\r\n- [Define A Model's Default Filter](#define-the-default-model-filter)\r\n- [Dynamically Select A Model's Filter](#dynamic-filters)\r\n\r\n\r\n#### Default Settings\r\n\r\nThe default namespace for all filters is `App\\ModelFilters\\` and each Model expects the filter classname to follow the `{$ModelName}Filter` naming convention regardless of the namespace the model is in.  Here is an example of Models and their respective filters based on the default naming convention.\r\n\r\n|Model|ModelFilter|\r\n|-----|-----------|\r\n|`App\\User`|`App\\ModelFilters\\UserFilter`|\r\n|`App\\FrontEnd\\PrivatePost`|`App\\ModelFilters\\PrivatePostFilter`|\r\n|`App\\FrontEnd\\Public\\GuestPost`|`App\\ModelFilters\\GuestPostFilter`|\r\n\r\n\r\n#### With Configuration File (Optional)\r\n> Registering the service provider will give you access to the `php artisan model:filter {model}` command as well as allow you to publish the configuration file.  Registering the service provider is not required and only needed if you want to change the default namespace or use the artisan command\r\n\r\nAfter installing the Eloquent Filter library, register the `EloquentFilter\\ServiceProvider::class` in your `config/app.php` configuration file:\r\n\r\n```php\r\n'providers' => [\r\n    // Other service providers...\r\n\r\n    EloquentFilter\\ServiceProvider::class,\r\n],\r\n```\r\n\r\nCopy the package config to your local config with the publish command:\r\n\r\n```bash\r\nphp artisan vendor:publish --provider=\"EloquentFilter\\ServiceProvider\"\r\n```\r\n\r\nIn the `config/eloquentfilter.php` config file.  Set the namespace your model filters will reside in:\r\n\r\n```php\r\n'namespace' => \"App\\\\ModelFilters\\\\\",\r\n```\r\n\r\n#### Define The Default Model Filter\r\n\r\nCreate a public method `modelFilter()` that returns `$this->provideFilter(Your\\Model\\Filter::class);` in your model.\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse EloquentFilter\\Filterable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function modelFilter()\r\n    {\r\n    \treturn $this->provideFilter(App\\ModelFilters\\CustomFilters\\CustomUserFilter::class);\r\n    }\r\n\r\n    //User Class\r\n}\r\n```\r\n#### Dynamic Filters\r\n\r\nYou can define the filter dynamically by passing the filter to use as the second parameter of the `filter()` method.  Defining a filter dynamically will take precedent over any other filters defined for the model.\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\User;\r\nuse App\\ModelFilters\\Admin\\UserFilter as AdminFilter;\r\nuse App\\ModelFilters\\User\\UserFilter as BasicUserFilter;\r\nuse Auth;\r\n\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n    \t$userFilter = Auth::user()->isAdmin() ? AdminFilter::class : BasicUserFilter::class;\r\n\r\n        return User::filter($request->all(), $userFilter)->get();\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Generating The Filter\r\n> Only available if you have registered `EloquentFilter\\ServiceProvider::class` in the providers array in your `config/app.php'\r\n\r\nYou can create a model filter with the following artisan command:\r\n\r\n```bash\r\nphp artisan model:filter User\r\n```\r\n\r\nWhere `User` is the Eloquent Model you are creating the filter for.  This will create `app/ModelFilters/UserFilter.php`\r\n\r\nThe command also supports psr-4 namespacing for creating filters.  You just need to make sure you escape the backslashes in the class name.  For example:\r\n\r\n```bash\r\nphp artisan model:filter AdminFilters\\\\User\r\n```\r\n\r\nThis would create `app/ModelFilters/AdminFilters/UserFilter.php`\r\n\r\n## Usage\r\n\r\n### Defining The Filter Logic\r\nDefine the filter logic based on the camel cased input key passed to the `filter()` method.\r\n\r\n- Empty strings are ignored\r\n- `setup()` will be called regardless of input\r\n- `_id` is dropped from the end of the input to define the method so filtering `user_id` would use the `user()` method\r\n- Input without a corresponding filter method are ignored\r\n- The value of the key is injected into the method\r\n- All values are accessible through the `$this->input()` method or a single value by key `$this->input($key)`\r\n- All Eloquent Builder methods are accessible in `this` context in the model filter class.\r\n\r\nTo define methods for the following input:\r\n\r\n```php\r\n[\r\n\t'company_id'   => 5,\r\n\t'name'         => 'Tuck',\r\n\t'mobile_phone' => '888555'\r\n]\r\n```\r\n\r\nYou would use the following methods:\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\t// This will filter 'company_id' OR 'company'\r\n    public function company($id)\r\n    {\r\n        return $this->where('company_id', $id);\r\n    }\r\n\r\n    public function name($name)\r\n    {\r\n        return $this->where(function($q) use ($name)\r\n        {\r\n            return $q->where('first_name', 'LIKE', \"%$name%\")\r\n                ->orWhere('last_name', 'LIKE', \"%$name%\");\r\n        });\r\n    }\r\n\r\n    public function mobilePhone($phone)\r\n    {\r\n        return $this->where('mobile_phone', 'LIKE', \"$phone%\");\r\n    }\r\n\r\n\tpublic function setup()\r\n    {\r\n        $this->onlyShowDeletedForAdmins();\r\n    }\r\n\r\n    public function onlyShowDeletedForAdmins()\r\n    {\r\n        if(Auth::user()->isAdmin())\r\n        {\r\n            $this->withTrashed();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n> **Note:**  In the above example if you do not want `_id` dropped from the end of the input you can set `protected $drop_id = false` on your filter class.  Doing this would allow you to have a `company()` filter method as well as a `companyId()` filter method.\r\n\r\n> **Note:** In the example above all methods inside `setup()` will be called every time `filter()` is called on the model\r\n\r\n\r\n#### Additional Filter Methods\r\n\r\nThe `Filterable` trait also comes with the below query builder helper methods:\r\n\r\n|EloquentFilter Method|QueryBuilder Equivalent|\r\n|---|---|\r\n|`$this->whereLike($column, $string)`|`$query->where($column, 'LIKE', '%'.$string.'%')`|\r\n|`$this->whereBeginsWith($column, $string)`|`$query->where($column, 'LIKE', $string.'%')`|\r\n|`$this->whereEndsWith($column, $string)`|`$query->where($column, 'LIKE', '%'.$string)`|\r\n\r\nSince these methods are part of the `Filterable` trait they are accessible from any model that implements the trait without the need to call in the Model's EloquentFilter.\r\n\r\n\r\n### Applying The Filter To A Model\r\n\r\nImplement the `EloquentFilter\\Filterable` trait on any Eloquent model:\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse EloquentFilter\\Filterable;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    //User Class\r\n}\r\n```\r\n\r\nThis gives you access to the `filter()` method that accepts an array of input:\r\n\r\n```php\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n        return User::filter($request->all())->get();\r\n    }\r\n}\r\n```\r\n\r\n## Filtering By Relationships\r\n>There are two ways to filter by related models.  Using the `$relations` array to define the input to be injected into the related Model's filter.  If the related model doesn't have a model filter of it's own or you just want to define how to filter that relationship locally instead of adding the logic to that Model's filter then use the `related()` method to filter by a related model that doesn't have a ModelFilter.  You can even combine the 2 and define which input fields in the `$relations` array you want to use that Model's filter for as well as use the `related()` method to define local methods on that same relation.  Both methods nest the filter constraints into the same `whereHas()` query on that relation.\r\n\r\nFor both examples we will use the following models:\r\n\r\nA `App\\User` that `hasMany` `App\\Client::class`:\r\n\r\n```php\r\nclass User extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function clients()\r\n    {\r\n    \treturn $this->hasMany(Client::class);\r\n    }\r\n}\r\n```\r\n\r\nAnd each `App\\Client` belongs to `App\\Industry::class`:\r\n\r\n```php\r\nclass Client extends Model\r\n{\r\n    use Filterable;\r\n\r\n    public function industry()\r\n    {\r\n    \treturn $this->belongsTo(Industry::class);\r\n    }\r\n    \r\n    public function scopeHasRevenue($query)\r\n    {\r\n    \treturn $query->where('total_revenue', '>', 0);\r\n    }\r\n}\r\n```\r\n\r\n\r\nWe want to query our users and filter them by the industry and volume potential of their clients that have done revenue in the past.\r\n\r\nInput used to filter:\r\n\r\n```php\r\n$input = [\r\n\t'industry' \t\t   => '5',\r\n    'potential_volume' => '10000'\r\n];\r\n```\r\n\r\n### Setup\r\n\r\nBoth methods will invoke a setup query on the relationship that will be called EVERY time this relationship is queried.  The setup methods signature is `{$related}Setup()` and is injected with an instance of that relations query builder.  For this example let's say when querying users by their clients I only ever want to show agents that have clients with revenue. Without choosing wich method to put it in (because sometimes we may not have all the input and miss the scope all together if we choose the wrong one) and to avoid query duplication by placing that constraint on ALL methods for that relation we call the related setup method in the `UserFilter` like:\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic function clientsSetup($query)\r\n    {\r\n    \treturn $query->hasRevenue();\r\n    }\r\n}\r\n```\r\nThis prepend all queries with the `hasRevenue()` whenever the `UserFilter` runs any constriants on the `clients()` relationship.  If there are no queries to the `clients()` relationship then this method will not be invoked.\r\n\r\n> You can learn more about scopes [here](https://laravel.com/docs/master/eloquent#local-scopes)\r\n\r\n\r\n### Ways To Filter Related Models \r\n\r\n- [With The `related()` Method](#filter-related-models-with-the-related-method)\r\n- [Using The `$relations` Array](#filter-related-models-using-the-relations-array)\r\n- [With Both Methods](#filter-related-models-with-both-methods)\r\n\r\n#### Filter Related Models With The `related()` Method:\r\n\r\nThe `related()` method is a little easier to setup and is great if you aren't going to be using the related Model's filter to ever filter that Model explicitly.  The `related()` method takes the same parameters as the `Eloquent\\Builder`'s `where()` method except for the first parameter being the relationship name.\r\n\r\n##### Example:\r\n\r\n\r\n`UserFilter` with an `industry()` method that uses the `ModelFilter`'s `related()` method\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic function industry($id)\r\n    {\r\n    \treturn $this->related('clients', 'industry_id', '=', $id);\r\n        \r\n        // This would also be shorthand for the same query\r\n        // return $this->related('clients', 'industry_id', $id);\r\n    }\r\n    \r\n    public function potentialVolume($volume)\r\n    {\r\n    \treturn $this->related('clients', 'potential_volume', '>=', $volume);\r\n    }\r\n}\r\n```\r\n\r\nOr you can even pass a closure as the second argument which will inject an instance of the related model's query builder like:\r\n```php\r\n\t$this->related('clients', function($query) use ($id) {\r\n    \treturn $query->where('industry_id', $id);\r\n    });\r\n```\r\n\r\n#### Filter Related Models Using The `$relations` Array:\r\n\r\nAdd the relation in the `$relations` array with the name of the relation as referred to on the model as the key and an array of input keys that was passed to the `filter()` method.\r\n\r\nThe related model **MUST** have a ModelFilter associated with it.  We instantiate the related model's filter and use the input values from the `$relations` array to call the associated methods.\r\n\r\nThis is helpful when querying multiple columns on a relation's table while avoiding multipe `whereHas()` calls for the same relationship.  For a single column using a `$this->whereHas()` method in the model filter works just fine.  In fact, under ther hood the model filter applies all constraints in the `whereHas()` method.\r\n\r\n##### Example:\r\n\r\n`UserFilter` with the relation defined so it's able to be queried.\r\n\r\n```php\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [\r\n        'clients' => ['industry', 'potential_volume'],\r\n    ];\r\n}\r\n```\r\n\r\n`ClientFilter` with the `industry` method that's used to filter:\r\n> **Note:** The `$relations` array should identify the relation and the input key to filter by that relation. Just as the `ModelFilter` works, this will access the camelCased method on that relation's filter. If the above example was using the key `industry_type` for the input the relations array would be `$relations = ['clients' => ['industry_type']]` and the `ClientFilter` would have the method `industryType()`.\r\n\r\n```php\r\nclass ClientFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [];\r\n\r\n    public function industry($id)\r\n    {\r\n    \treturn $this->where('industry_id', $id);\r\n\t}\r\n    \r\n    public function potentialVolume($volume)\r\n    {\r\n    \treturn $this->where('potential_volume', '>=', $volume);\r\n    }\r\n}\r\n```\r\n#### Filter Related Models With Both Methods\r\nYou can even use both together and it will produce the same result and only query the related model once.  An example would be:\r\n\r\nIf the following array is passed to the `filter()` method:\r\n\r\n```php\r\n[\r\n\t'name' \t\t \t\t=> 'er',\r\n    'last_name'  \t\t=> ''\r\n    'company_id' \t\t=> 2,\r\n    'roles'      \t\t=> [1,4,7],\r\n    'industry'   \t\t=> 5,\r\n    'potential_volume' => '10000'\r\n]\r\n```\r\n\r\nIn `app/ModelFilters/UserFilter.php`:\r\n\r\n```php\r\n<?php namespace App\\ModelFilters;\r\n\r\nuse EloquentFilter\\ModelFilter;\r\n\r\nclass UserFilter extends ModelFilter\r\n{\r\n\tpublic $relations = [\r\n        'clients' => ['industry'],\r\n    ];\r\n    \r\n    public function clientsSetup($query)\r\n    {\r\n    \treturn $query->hasRevenue();\r\n    }\r\n\r\n\tpublic function name($name)\r\n    {\r\n    \treturn $this->where(function($q)\r\n        {\r\n        \treturn $q->where('first_name', 'LIKE', $name . '%')->orWhere('last_name', 'LIKE', '%' . $name.'%');\r\n        });\r\n    }\r\n    \r\n    public function potentialVolume($volume)\r\n    {\r\n    \treturn $this->related('clients', 'potential_volume', '>=', $volume);\r\n    }\r\n\r\n    public function lastName($lastName)\r\n    {\r\n    \treturn $this->where('last_name', 'LIKE', '%' . $lastName);\r\n    }\r\n\r\n    public function company($id)\r\n    {\r\n    \treturn $this->where('company_id',$id);\r\n    }\r\n\r\n    public function roles($ids)\r\n    {\r\n    \treturn $this->whereHas('roles', function($query) use ($ids)\r\n        {\r\n        \treturn $query->whereIn('id', $ids);\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n##### Adding Relation Values To Filter\r\n\r\nSometimes, based on the value of a parameter you may need to push data to a relation filter.  The `push()` method does just this.\r\nIt accepts one argument as an array of key value pairs or to arguments as a key value pair `push($key, $value)`.\r\nRelated models are filtered AFTER all local values have been executed you can use this method in any filter method.\r\nThis avoids having to query a related table more than once.  For Example:\r\n\r\n```php\r\npublic $relations = [\r\n    'clients' => ['industry', 'status'],\r\n];\r\n\r\npublic function statusType($type)\r\n{\r\n    if($type === 'all') {\r\n        $this->push('status', 'all');\r\n    }\r\n}\r\n```\r\n\r\nThe above example will pass `'all'` to the `stats()` method on the `clients` relation of the model.\r\n> Calling the `push()` method in the `setup()` method will allow you to push values to the input for filter it's called on\r\n\r\n#### Pagination\r\n\r\nIf you want to paginate your query and keep the url query string without having to use:\r\n\r\n```php\r\n{!! $pages->appends(Input::except('page'))->render() !!}\r\n```\r\n\r\nThe `paginateFilter()` and `simplePaginateFilter()` methods accept the same input as [Laravel's paginator](https://laravel.com/docs/master/pagination#basic-usage) and returns the respective paginator.\r\n\r\n```php\r\nclass UserController extends Controller\r\n{\r\n\tpublic function index(Request $request)\r\n    {\r\n        $users = User::filter($request->all())->paginateFilter();\r\n\r\n        return view('users.index', compact('users'));\r\n    }\r\n```\r\n\r\nOR:\r\n\r\n```php\r\n    public function simpleIndex(Request $request)\r\n    {\r\n        $users = User::filter($request->all())->paginateSimpleFilter();\r\n\r\n        return view('users.index', compact('users'));\r\n    }\r\n}\r\n```\r\n\r\nIn your view `$users->render()` will return pagination links as it normally would but with the original query string with empty input ignored.\r\n\r\n\r\n# Contributing\r\nAny contributions welcome!\r\n",
  "google": "UA-75164993-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}